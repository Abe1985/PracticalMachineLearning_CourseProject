pt(tstaticp, (9+9-2), lower.tail = TRUE)
sdb <-  1.5
sdp <-  1.8
pooledvariance <- (sdb^2+adp^2)/2
pooledsd <- sqrt(pooledvariance)
pooledvariance <- (sdb^2+sdp^2)/2
pooledsd <- sqrt(pooledvariance)
tstatic <- difference/(pooledsd*sqrt(n))
pt(tstatic, (9+9-2), lower.tail = TRUE)
pt(tstatic, (9+9-2), lower.tail = FALSE)
tstatic <- difference/(pooledsd*sqrt(n*2))
pt(tstatic, (9+9-2), lower.tail = TRUE)
pt(tstatic, (9+9-2), lower.tail = FALSE)
difference <- -3-1
tstatic <- difference/(pooledsd*sqrt(n*2))
pt(tstatic, (9+9-2), lower.tail = TRUE)
pt(tstatic, (9+9-2), lower.tail = FALSE)
tstatic <- difference/(pooledsd*sqrt(n))
pt(tstatic, (9+9-2), lower.tail = TRUE)
pt(tstatic, (9+9-2), lower.tail = FALSE)
pt(tstatic, 8, lower.tail = TRUE)
pooledvariance
pooledsd
tstatic
pt(tstatic, (9+9-2), lower.tail = TRUE)
qt(0.975, 9)
qt(0.975, 8)
qt(0.90, 8)
pt(tstatic, 8)
qt(0.99, 8)
qt(0.975, 8)
qt(0.975, (9+9-2))
qt(0.99, (9+9-2))
qt(0.975, (9+9-2))
qt(0.99, (9+9-2))
tstatic <- difference/(pooledsd*sqrt(n))
tstatic
tstatic <- difference/(pooledsd*sqrt(n*2))
tstatic
pt(tstatic, (9+9-2), lower.tail = TRUE)
1-2*pt(tstatic, (9+9-2), lower.tail = TRUE)
2*pt(tstatic, (9+9-2), lower.tail = TRUE)
2*pt(tstatic, 8)
qt(0.90, (9+9-2))
n <- 100
mu <- .01
sd <- .04
mu0 <- 0
alpha <- 0.05
z <- qnorm(1-alpha)
pnorm(mu0+z*sd/sqrt(n), mean=mu, sd=sd, lower.tail=FALSE)
power.t.test(n=n, delta= mu, sd=sd, alternative = "one.sided")
pnorm(mu0+z*sd, mean=mu, sd=sd, lower.tail=FALSE)
pnorm(mu0+z*sd/sqrt(n), mean=mu, sd=sd, lower.tail=FALSE)
pnorm(mu0+z*sd/sqrt(n), mean=mu, sd=sd/sqrt(n), lower.tail=FALSE)
power.t.test(delta= mu, sd=sd/sqrt(n), power=.90, sig.level = 0.05, alternative = "one.sided", strict=TRUE)
power.t.test(delta= mu, sd=sd/sqrt(160), power=.90, sig.level = 0.05, alternative = "one.sided", strict=TRUE)
power.t.test(delta= mu, sd=sd/sqrt(120), power=.90, sig.level = 0.05, alternative = "one.sided", strict=TRUE)
power.t.test(delta= mu, sd=sd/10, power=.90, sig.level = 0.05, alternative = "one.sided", strict=TRUE)
power.t.test(delta= mu, sd=sd, power=.90, sig.level = 0.05, alternative = "one.sided", strict=TRUE)
power.t.test(delta= mu, sd=sd, power=.90, sig.level = 0.05, alternative = "one.sided", strict=TRUE)
power.t.test(delta= mu, sd=sd, power=.90, sig.level = 0.05, alternative = "one.sided")
power.t.test(delta= mu, power=.90, sig.level = 0.05, alternative = "one.sided")
power.t.test(delta= mu, sd=sd, power=.90, sig.level = 0.05, type = "one.sample", alt = "one.sided")$n
power.t.test(delta= mu, sd=sd, power=.90, sig.level = 0.05, type = "one.sample", alt = "one.sided")
install.packages("caret")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
training = segmentationOriginal[ segmentationOriginal$Case=="Train",]
testing = segmentationOriginal[ segmentationOriginal$Case=="Test",]
set.seed(125)
modelfit1 <- train(Case ~ .,method="rpart",data=training)
head(training)
modelfit1 <- train(Class ~ .,method="rpart",data=training
)
modelfit1(TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2)
modelfit1(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
predict(modelfit1, TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
modelfit1 <- train(Class ~ .,method="rpart",data=training)
predict(modelfit1, TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
modelfit1 <- rpart(Class ~ .,data=training)
predict(modelfit1, TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
predict(modelfit1, data=training, TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
modelfit1
predict(modelfit, TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2)
modelfit <- rpart(Class ~ .,data=training)
predict(modelfit, TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2)
predict(modelfit, TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2)
pred <- predict(modelfit, TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2)
pred <- predict(Class, data=training, modelfit, TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2)
pred <- predict(training$Class, modelfit, TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2)
predict(modelfit, newdata=data.frame(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2)
)
predict(modelfit, newdata=data.frame(TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100))
predict(modelfit, newdata=data.frame(TotalIntench2 = 50000, FiberWidthCh1 = 10, VarIntenCh4 = 100))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
training = segmentationOriginal[ segmentationOriginal$Case=="Train",]
testing = segmentationOriginal[ segmentationOriginal$Case=="Test",]
set.seed(125)
modelfit <- rpart(Class ~ .,data=training)
modelfit <- train(Class ~ .,method="rpart", data=training)
pred <- predict(modelfit, newdata=data.frame(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2))
head(training)
modelfit <- train(Class ~ c(TotalIntench2,FiberWidthCh1, PerimStatusCh1),method="rpart", data=training)
modelfit <- train(Class ~ c(TotalIntenCh2,FiberWidthCh1, PerimStatusCh1),method="rpart", data=training)
modelfit <- train(Class ~ ,,method="rpart", data=training)
pred <- predict(modelfit, newdata=data.frame(TotalIntenCh2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2))
pred <- predict(modelfit, newdata=data.frame(training[TotalIntenCh2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2]))
pred <- predict(modelfit, newdata=data.frame(training[training$TotalIntenCh2 = 23000, training$FiberWidthCh1 = 10, training$PerimStatusCh1=2]))
pred <- predict(modelfit, newdata=data.frame(training[training$TotalIntenCh2 == 23000,
training$FiberWidthCh1 == 10, training$PerimStatusCh1==2]))
pred <- predict(modelfit, newdata=data.frame(training[training$TotalIntenCh2 == 23000 &
training$FiberWidthCh1 == 10 & training$PerimStatusCh1==2]))
pred <- predict(modelfit, newdata=training[training$TotalIntenCh2 == 23000 &
training$FiberWidthCh1 == 10 & training$PerimStatusCh1==2])
predict(modelfit, newdata=training[training$TotalIntenCh2 == 23000 &
training$FiberWidthCh1 == 10 & training$PerimStatusCh1==2])
predict(modelfit, newdata=training[training$TotalIntenCh2 == 23000 &
training$FiberWidthCh1 == 10 & training$PerimStatusCh1==2])
predict(modelfit)
pred  <- predict(modelfit)$Class
pred  <- predict(modelfit, newdata=training)
pred[pred$TotalIntenCh2 == 23000 &
pred$FiberWidthCh1 == 10 & pred$PerimStatusCh1==2]
pred[TotalIntenCh2 == 23000 &     FiberWidthCh1 == 10 & PerimStatusCh1==2]
pred
pred  <- predict(modelfit, newdata=training[TotalIntenCh2 == 23000 &     FiberWidthCh1 == 10 & PerimStatusCh1==2])
a. TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2
pred  <- predict(modelfit, newdata=data.frame(training[training$TotalIntenCh2 == 23000 &     training$FiberWidthCh1 == 10 & trai
n
pred  <- predict(modelfit, newdata=data.frame(training[training$TotalIntenCh2 == 23000 &
training$FiberWidthCh1 == 10 & training$PerimStatusCh1==2])
)
head(training)
at <- training[training$TotalIntenCh2 == 23000 &
training$FiberWidthCh1 == 10 & training$PerimStatusCh1==2]
head(at)
pred  <- predict(modelfit, TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2)
pred  <- predict(modelfit, newdata= data.frame(TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2)
pred  <- predict(modelfit, newdata= data.frame(TotalIntench2 = 23000; FiberWidthCh1 = 10; PerimStatusCh1=2)
pred  <- predict(modelfit, newdata= data.frame(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2)
)
pred  <- predict(modelfit, newdata= data.frame(training$Cell, TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2))
pred  <- predict(modelfit, newdata=training)
pred
pred <- predict(modelfit, newdata=training, TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2)
pred  <- predict(modelfit, newdata= data.frame(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2))
pred  <- predict(modelfit, newdata= data.frame(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2, Cell=1))
pred  <- predict(modelfit$finalModel, newdata= data.frame(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2, Cell=1))
modelfit$finalModel
modelfit <- train(Class ~ ,,method="rpart", data=training)
modelfit <- train(Class ~ .,method="rpart", data=training)
pred  <- predict(modelfit$finalModel, newdata= data.frame(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2))
modelfit$finalModel
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(rattle)
fancyRpartPlot(modelfit$finalModel)
plot(modelfit$finalModel)
modelfit$finalModel
plot(modelfit$finalModel, uniform=TRUE,
main="Classification Tree")
text(modelfit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
model <- train(Area ~ ., data=olive)
model <- train(Area ~ ., method="rpart", data=olive)
predict(model, newdata = as.data.frame(t(colMeans(olive))) )
head(olive)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
head(trainSA)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
head(trainSA)
set.seed(13234)
train(chd ~ c(age, alcohol,obesity, tobacco, typea, ldl), method="glm", family="binomial")
train(chd ~ c(age, alcohol,obesity, tobacco, typea, ldl), method="glm", family="binomial", data=trainSA)
train(chd ~ age + alcohol+obesity+ tobacco +typea+ ldl, method="glm", family="binomial", data=trainSA)
modelfit <- train(chd ~ age + alcohol+obesity+ tobacco +typea+ ldl, method="glm", family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass
pred <- predict(modelfit, newdata=trainSA)
missClass(testSA, pred)
missClass(testSA$chd, pred$chd)
missClass(testSA, predict(modelfit))
modelfit <- train(chd ~ age + alcohol+obesity+ tobacco +typea+ ldl, method="glm", family="binomial", data=trainSA)
missClass(testSA, predict(modelfit))
predict(modelfit)
missClass(testSA$chd, predict(modelfit))
missClass(trainSA$chd, predict(modelfit))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
vowel.train$y <- asfactorvariable(vowel.train$y)
vowel.train$y <- asfactor(vowel.train$y)
vowel.train$y <- as.factor(vowel.train$y)
class(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modelfit  <- train(y ~ ., method="rf", data=vowel.test)
library(caret)
modelfit  <- train(y ~ ., method="rf", data=vowel.test)
varImp(modelfit$finalModel)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modelfit1 <- train(chd ~ age + alcohol+obesity+ tobacco +typea+ ldl, method="glm", family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(modelfit))
missClass(testSA$chd, predict(modelfit))
modelfit <- train(chd ~ age + alcohol+obesity+ tobacco +typea+ ldl, method="glm", family="binomial", data=trainSA)
missClass(trainSA$chd, predict(modelfit))
missClass(testSA$chd, predict(modelfit))
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
#Then set the seed to 13234 and fit a logistic regression model (method="glm",
#be sure to specify family="binomial") with Coronary Heart Disease (chd) as the
#outcome and age at onset, current alcohol consumption, obesity levels, cumulative
#tabacco, type-A behavior, and low density lipoprotein cholesterol as predictors.
set.seed(13234)
modelfit <- train(chd ~ age + alcohol+obesity+ tobacco +typea+ ldl, method="glm", family="binomial", data=trainSA)
#Calculate the misclassification rate for your model using this function and a
#prediction on the "response" scale:
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
#What is the misclassification rate on the training set? What is the misclassification
#rate on the test set?
missClass(trainSA$chd, predict(modelfit))
missClass(testSA$chd, predict(modelfit))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
#Set the variable y to be a factor variable in both the training and test set.
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
#Then set the seed to 33833.
set.seed(33833)
#Fit a random forest predictor relating the factor variable y to the remaining variables.
library(caret)
modelfit  <- train(y ~ ., method="rf", data=vowel.test)
#Read about variable importance in random forests here:  http://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm#ooberr
#The caret package uses by defualt the Gini importance. Calculate the variable
# importance using the varImp function in the caret package.
varImp(modelfit)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
#Set the variable y to be a factor variable in both the training and test set.
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
#Then set the seed to 33833.
set.seed(33833)
modelfit  <- randomForest(y ~ ., data=vowel.test)
modelfit  <- randomForest(vowel.test, Y = y )
library("randomForest", lib.loc="~/R/win-library/3.1")
modelfit  <- randomForest(vowel.test, Y = y )
varImp(modelfit)
library(caret)
varImp(modelfit)
modelfit  <- randomForest(vowel.test, Y = y )
modelfit(finalModel)
modelfit$finalModel
modelfit  <- randomForest(vowel.test[-1,], Y = y )
modelfit$finalModel
modelfit  <- randomForest(vowel.test[-1,], y= vowel.test$y )
modelfit  <- randomForest(vowel.test[,-1], y= vowel.test$y )
modelfit$finalModel
modelfit  <- train(y ~ ., data=vowel.test, method="rf")
modelfir
modelfit
varImp(modelfit)
varImp(modelfit$finalModel)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
#Set the variable y to be a factor variable in both the training and test set.
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
#Then set the seed to 33833.
set.seed(33833)
#Fit a random forest predictor relating the factor variable y to the remaining variables.
library(caret)
modelfit  <- train(y ~ ., data=vowel.test, method="rf")
#Read about variable importance in random forests here:  http://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm#ooberr
#The caret package uses by defualt the Gini importance. Calculate the variable
# importance using the varImp function in the caret package.
varImp(modelfit, model=0)
#What is the order of varia
varImp(modelfit, model=1)
varImp(modelfit, scale=FAlse)
varImp(modelfit, scale=FALSE)
varImp(modelfit, useModel=FALSE)
varImp(modelfit, nonpara=FALSE)
varImp(modelfit, model=1)
varImp(modelfit, useModel=TRUE)
varImp(modelfit, useModel=FALSE)
library(randomforest)
modelfit  <- train(y ~ ., data=vowel.train, method="rf")
varImp(modelfit, model=0)
varImp(modelfit, useModel=0)
install.packages("pROC")
varImp(modelfit, useModel=0)
setwd("~/coursera/Practical Machine Learning/course project accel")
setwd("~/coursera/Practical Machine Learning/course project accel")
setwd("~/coursera/Practical Machine Learning/course project accel")
```{r, cache=TRUE}
library(caret)
trainraw <- read.csv("pml-training.csv")
colneeded <- c() #creates an empty vector that will contain all columns needed
k <- 0 #variable needed to count
#if the column contains more than 19 Na's it will be excluded in our count. Only the number
#of the columns with fewerer NA's will be stored
for(i in 1:length(names(trainraw))){
if(sum(is.na(trainraw[i]))>19){next}
else{ k <- k + 1
colneeded[[k]] <- i}
}
trains <- trainraw[,colneeded]
sum(is.na(trains))
library(caret)
nsv <- nearZeroVar(trains, saveMetrics=FALSE)
#all numbers of the variables that are near zero are stored in nsv
trainset <- trains[,(-nsv)]
trainset$classe <- as.factor(trainset$classe)
library(randomForest)
set.seed(444)
inTrain <- createDataPartition(y=trainset$classe, p=0.75, list=FALSE)
training <- trainset[inTrain,]
testing <- trainset[-inTrain,]
modelfit <- train(as.factor(classe) ~., method="rf", trControl = trainControl(method="cv", number=3), data=training)
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
test
library(caret)
testraw <- read.csv("pml-testing.csv")
colneeded <- c() #creates an empty vector that will contain all columns needed
k <- 0 #variable needed to count
#if the column contains more than 19 Na's it will be excluded in our count. Only the number
#of the columns with fewerer NA's will be stored
for(i in 1:length(names(testraw))){
if(sum(is.na(testraw[i]))>19){next}
else{ k <- k + 1
colneeded[[k]] <- i}
}
tests <- testraw[,colneeded]
sum(is.na(tests))
tests
answer <- predict(modelfit, trains)
answer
answer <- predict(modelfit$finalModel, trains)
answer <- predict(modelfit$finalModel, newdata=trains)
answer <- predict(modelfit$finalModel, newdata=trainraw)
answer <- predict(modelfit$finalModel, newdata=trainraw)
answer <- predict(modelfit$finalModel, newdata=trains)
answer <- predict(modelfit$finalModel, newdata=trainraw)
answer <- predict(modelfit, newdata=trainraw)
answer
answer <- predict(modelfit$finalModel, newdata=trainraw)
answer <- predict(modelfit$finalModel, newdata=training)
answer <- predict(modelfit$finalModel, newdata=tests)
answer <- predict(modelfit$finalModel, newdata=testraw)
answer <- predict(modelfit$finalModel, newdata=training)
head(training)
answer <- predict(modelfit$finalModel, newdata=testing)
answer <- predict(modelfit, newdata=testing)
answer <- predict(modelfit, newdata=tests)
answer <- predict(modelfit, newData=tests)
tail(tests)
answer <- predict(modelfit, newData=tests)
answer <- predict(modelfit, newdata=tests)
head(answer)
answer <- predict(modelfit, newdata=tests[1,])
answer
answer <- predict(modelfit, newdata=tests[2,])
answer
answer <- predict(modelfit, newdata=tests[5,])
answer
answer <- predict(modelfit, newdata=tests[9,])
answer
answer <- predict(modelfit, newdata=tests[20,])
answer
answer <- predict(modelfit, newdata=tests[20,])
answer
a <- c(1,2)
for (i in 1:20) {
a[i] <- predict(modelfit, newdata=tests[i,])
}
a
a <- c("T","T","T")
for (i in 1:20) {
a[i] <- predict(modelfit, newdata=tests[i,])
}
a
a <- c("T","T","T")
for (i in 1:20) {
a[i] <- predict(modelfit$finalModel, newdata=tests[i,])
}
for (i in 1:20) {
a[i] <- predict(modelfit, newdata=tests[i,])
}
a
answer <- predict(modelfit, newdata=tests[20,])
answer
answer[1]
answer[[1]]
a <- c("T","T","T")
for (i in 1:20) {
a[i] <- predict(modelfit, newdata=tests[i,])[i]
}
a
for (i in 1:20) {
predict(modelfit, newdata=tests[i,])
}
predict(modelfit, newdata=tests[1,])
predict(modelfit, newdata=tests[2,])
predict(modelfit, newdata=tests[3,])
predict(modelfit, newdata=tests[4,])
predict(modelfit, newdata=tests[5,])
predict(modelfit, newdata=tests[6,])
predict(modelfit, newdata=tests[7,])
predict(modelfit, newdata=tests[8,])
predict(modelfit, newdata=tests[9,])
predict(modelfit, newdata=tests[10,])
predict(modelfit, newdata=tests[11,])
predict(modelfit, newdata=tests[12,])
predict(modelfit, newdata=tests[13,])
predict(modelfit, newdata=tests[14,])
predict(modelfit, newdata=tests[15,])
predict(modelfit, newdata=tests[16,])
predict(modelfit, newdata=tests[17,])
predict(modelfit, newdata=tests[18,])
predict(modelfit, newdata=tests[19,])
predict(modelfit, newdata=tests[20,])
modelfit$finalmodel
modelfit$finalModel
modelfit
answer <- predict(modelfit, newdata=tests)
answer
answer <- predict(modelfit, newdata=testraw)
answer
testraw <- read.csv("pml-testing.csv")
answer <- predict(modelfit, newdata=testraw)
answer
answer <- predict(modelfit, newdata=testraw)
answer
tailo(training)
tail(training)
predict(modelfit, newdata=training[19621,])
training[19618,]
training[600,]
training[300,]
training[800,]
training[1000,]
training[10000,]
answer <- predict(modelfit, newdata=training[10000,])
answer
varImpPlot(modelfit)
varImpPlot(modelfit$finalModel)
head(training)
modelfit <- train(as.factor(classe) ~., method="rf", trControl = trainControl(method="cv", number=3), data=training[,c(-1,-2)])
varImpPlot(modelfit$finalModel)
summary(training$num_window)
setwd("~/coursera/Practical Machine Learning/course project accel")
setwd("~/coursera/Practical Machine Learning/course project accel")
library(caret)
```{r}
modelfit$err.rate
modelfit <- train(as.factor(classe) ~., method="rf", trControl = trainControl(method="cv", number=3), data=training[,-c(1:6)])
modelfit$finalModel
modelfit$error
error.rate
answer <- predict(modelfit, newdata=tests)
answer
setwd("~/coursera/Practical Machine Learning/course project accel/PracticalMachineLearning_CourseProject")
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
pml_write_files(answer)
